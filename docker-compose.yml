version: '3.9'

services:
  django:
    image: algobattles:latest
    container_name: api
    build: .  # Build image from current directory Dockerfile
    environment:
      - DJANGO_SETTINGS_MODULE=AlgoBattles.settings
      - DATABASE_URL=postgres://postgres:algobattles@db:5432/algobattles
      - REDIS_URL=redis://redis:6379/0
      - RABBITMQ_URL=amqp://guest:guest@rabbitmq:5672/
      - HF_DATASETS_CACHE=/usr/datasets
    ports:
      - "8000:8000"
    depends_on:
      - db
      - redis
      - rabbitmq
    volumes:
      - type: bind
        source: /var/run/docker.sock
        target: /var/run/docker.sock
      - type: bind  # Use locally available datasets
        source: ~/.cache/huggingface/datasets
        target: /usr/datasets
      - static_files:/usr/src/staticfiles
    networks:
      - internal_network
    command: bash -c "/usr/src/.venv/bin/python -m manage migrate && /usr/src/.venv/bin/python -m manage collectstatic <<< yes && /usr/src/.venv/bin/python -m manage runserver 0.0.0.0:8000"

  db:
    image: postgres:latest
    container_name: postgres
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: algobattles
      POSTGRES_DB: algobattles
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - internal_network

  redis:
    image: redis:latest
    container_name: redis
    ports:
      - "6379:6379"
    networks:
      - internal_network

  rabbitmq:
    image: rabbitmq
    container_name: rabbitmq
    ports:
      - "5672:5672"
    environment:
      RABBITMQ_DEFAULT_USER: guest
      RABBITMQ_DEFAULT_PASS: guest
    networks:
      - internal_network

  nginx:
    image: algobattles-nginx:latest
    container_name: nginx
    build:
      context: .
      dockerfile: nginx/Dockerfile
    volumes:
      - static_files:/usr/share/nginx/html/static
    ports:
      - "80:80"
    depends_on:
      - django
    networks:
      - internal_network
      - external_network

volumes:
  postgres_data:
  static_files:

networks:
  internal_network:
    driver: bridge
  external_network:
    driver: bridge
